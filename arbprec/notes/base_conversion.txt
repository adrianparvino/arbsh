16:04 < graff> alphamule: well. I guess i need to just let it plow along and make the new number longer. i am a little 
               scared about this


16:04 < alphamule> You can also use an array prefilled to some size you estimate based on the difference
16:04 < alphamule> Like, say, binary to hex

16:05 < alphamule> You _know_ hex values take 1/4th the space
16:05 < graff> well, it's going the other way that is the problem. 
16:05 < alphamule> So, say, a 21-digit hex value can never be more than 84 bits

16:05 < graff> ah right. so how can i predict how much space the other direction will take, sorta?

16:05 < alphamule> Or a 128-bit number is never more than 32 nibbles
16:05 < quintopia> logs

16:05 < alphamule> Yes, it's a logorithmic rule
16:06 < graff> say hex to binary, which makes a longer number
16:06 < alphamule> Say, base 10 to 8




16:06 < alphamule> Round up and done :D
16:06 < quintopia> the length of a number n in base b is floor(log_b(n))+1

16:06 < alphamule> This is assuming you're using something like BCD or a string to do large numbers.

16:07 < graff> alright so i don't have log obviously. i mean i can write it, but i need something a bit different
16:07 < quintopia> i'm not assuming anything :P
16:07 < ap4lmtree> that says it would be about 60 dollars,  sound that sound about right?
16:07 < ap4lmtree> or am i thinking about this wrong
16:07 < mud> ap4lmtree: Is it 30% annual interest, compounded monthly?
16:07 < ap4lmtree> yes




16:08 < graff> alphamule: i think i know how to get that logically though, thank you 
16:08 < graff> let me mess around with it a bit and I will come back
16:08 < alphamule> For stuff like 10 to binary...
16:08 -!- Millennial [~quassel@212.252.143.66] has quit [Ping timeout: 248 seconds]
16:08 < alphamule> Well, you do the log _once_
16:08 < alphamule> log(10)/log(2)

16:08 < alphamule> Same as log of 10 in base 2
16:08 < alphamule> And just store that as a constant
16:08 < graff> so i do the log on the base?
16:08 < alphamule> Rounding up for safety :)
16:09 -!- damke_ [~damke@unaffiliated/damke] has quit [Ping timeout: 240 seconds]
16:09 < graff> well, anyway. I am confused. but i will copy the cnversation and get it worked out
16:09 < graff> thank you

16:09 < alphamule> Like log_2 of 10 is 3.3219280948873623478703194294894
16:09 < alphamule> So for 5 decimal digits...
16:10 < quintopia> graff: what system is this that doesn't have logs?
16:10 < alphamule> 16.609640474436811739351597147447

16:10 < alphamule> So this is rounded to 17 bits
16:10 < alphamule> Not counting sign
16:11 < quintopia> i mean, this method doesn't require you to take logs of your bignums, just the base.
16:11 < alphamule> Assuming unsigned integer in string form (that is, ASCII for '0' and '1')
16:11 < graff> quintopia: well i wrote the system, i can use log for single digits though
16:11 < alphamule> Yeah, that's the clever bit

16:11 < graff> i thought you meant running log on my bignum / array, which is not really possible
16:11 < alphamule> Number of digits times the ratio of the logs

16:12 < alphamule> digits*log_b1(b2) I believe
16:12 < alphamule> Where b1 and b2 are the bases
16:12 < quintopia> alphamule: i'm not sure why anyone would store the numbers as strings of ascii digits. i'm not sure why 
                   anyone would even allow the internal representation to change bases.
16:12 < graff> alphamule: well you have me on the right track anyway. i might be able to find more reference in Knuth's 
               TAOCP
16:12 < alphamule> It's just as example, quintopia
16:12 < alphamule> Packed bits is another
16:13 < alphamule> Or BCD or whatever
16:13 < graff> quintopia: strings or int arrays can actually be very effective
16:13 < quintopia> packed bits is the way to go
16:13 < quintopia> or int arrays yeah
16:13 < alphamule> It depends on application :)




futher the conversation with Plankwalk


20:05 < graff> let me link them real quick actually.  "you could use a large array of doubles whose sum is the whole value, and multiply by 10 in it but that's less efficient than an array of ints 
               since the exponents are redundant ultimately your bignum work should yield a nice way to do it"
20:06 < graff> PlanckWalk: anhy idea what he means by all that? seems a bit cryptic
20:07 -!- renlo [~loren@c-73-92-2-109.hsd1.ca.comcast.net] has quit [Ping timeout: 255 seconds]
20:07 < graff> I don't think this is how he does it, just an idea he came up with for me
20:08 < graff> anyway, no pressure sorry to be such a math begger
20:08 < graff> beggar *
20:08 -!- von-strauss [~von-strau@unaffiliated/pineaucharentais] has quit [Ping timeout: 272 seconds]
20:08 -!- aasdsa [~Neslepaks@178.61.71.85] has joined ##programming
20:08 < graff> perhaps he did not give enough information. I will ask him again after I tried a few things
20:08 -!- nosmelc [~nosmelc@71.81.228.181] has quit [Quit: Leaving]
20:10 -!- longshi [~mist_@apn-37-248-164-242.dynamic.gprs.plus.pl] has joined ##programming
20:10 -!- ewolfe [~textual@38.142.25.10] has quit [Quit: My MacBook has gone to sleep. ZZZzzz...]
20:10 -!- longshi [~mist_@apn-37-248-164-242.dynamic.gprs.plus.pl] has quit [Client Quit]
20:11 -!- Neslepaks [~Neslepaks@178.61.71.85] has quit [Ping timeout: 240 seconds]
20:12 -!- von-strauss [~von-strau@unaffiliated/pineaucharentais] has joined ##programming
20:13 < PlanckWalk> Is this for the base conversion?
20:13 -!- bule [~bule@gateway/tor-sasl/bule] has joined ##programming
20:13 < graff> PlanckWalk: i finished the base conversion for the arbitrary precision library! well it's not perfect but i got the basic idea
20:13 -!- longshi [~mist_@apn-37-248-164-242.dynamic.gprs.plus.pl] has joined ##programming
20:14 < graff> actually that is what I should be asking you about :p
20:14 < graff> but no, this is about my C library, hlibc and printing doubles
20:14 < graff> felker seems to think that the skills are subtley related, but I am not quite sure how
20:15 -!- badon [~badon@pdpc/supporter/active/badon] has quit [Remote host closed the connection]
20:15 < graff> I don't think that the standard C library ever leaves radix 10 for doubles/floats though
20:15 < PlanckWalk> Well, most of the work of printing arbitrary precision numbers is base conversion
20:15 -!- blip99 [~blip-@unaffiliated/blip-] has quit [Remote host closed the connection]
20:15 < PlanckWalk> Since usually the internal representation is in base 2
20:15 < PlanckWalk> Or base 2^32 or something
20:15 -!- badon [~badon@pdpc/supporter/active/badon] has joined ##programming
20:15 < PlanckWalk> (Depending upon how you interpret it)
20:16 -!- von-strauss [~von-strau@unaffiliated/pineaucharentais] has quit [Ping timeout: 255 seconds]
20:16 < graff> PlanckWalk: yeah, maybe I should get back to that topic for POSIX `bc' because that is what landley needs me to write. I need to match the output of `bc' exactly. unless of course 
               you thnk there is a way I can do it and be in spec. but still it'd be nice to just have it be exact so i can use it for my tests
20:16 < graff> it seems like there is a rounding step after base conversion?
20:17 < graff> i don't understand where these inaccurate answers come from, I mean if i convert perfectly and then do the calculation in base 10, and then convert back to obase -- the answer 
               should be perfect?
20:18 < graff> thank you for reminding btw, this is what I am supposed to be working on right now :p
20:18 -!- myxenovia [ca5a84ad@gateway/web/freenode/ip.202.90.132.173] has joined ##programming
20:18 -!- Hu0p [~Hu0p@128.163.236.250] has joined ##programming
20:18 -!- von-strauss [~von-strau@unaffiliated/pineaucharentais] has joined ##programming
20:20 -!- bule [~bule@gateway/tor-sasl/bule] has quit [Remote host closed the connection]
20:20 -!- bule [~bule@gateway/tor-sasl/bule] has joined ##programming
20:20 < PlanckWalk> Inaccuracies can creep in for fractional results
20:20 -!- django_ [~django_@unaffiliated/django-/x-8345756] has joined ##programming
20:20 -!- von-strauss [~von-strau@unaffiliated/pineaucharentais] has quit [Remote host closed the connection]
20:21 < PlanckWalk> E.g. 0.1_3 = 0.3333333333333333333333333333333333..._10
20:21 -!- von-strauss [~von-strau@unaffiliated/pineaucharentais] has joined ##programming
20:21 < graff> ah right.
20:21 < PlanckWalk> If you're converting to base 10, you'll need to truncate somewhere
20:22 < graff> hey for the converting from larger base to smaller base I need to estimate the space needed for the new answer is that  digits*log_b1(b2)?
20:22 < PlanckWalk> It can happen anytime you convert to a base that lacks some prime factors from the source base.
20:22 < PlanckWalk> Approximately yes
20:22 -!- Sasazuka [~Sasazuka@unaffiliated/sasazuka] has quit [Quit: My MacBook has gone to sleep. ZZZzzz...]
20:22 < graff> alright nice. alphamule was helping me with that
20:22 < PlanckWalk> But that's for integer part
20:23 < PlanckWalk> It's also an estimate of average digits needed for fractional part, but the rounding can be messy there
20:23 -!- longshi [~mist_@apn-37-248-164-242.dynamic.gprs.plus.pl] has quit [Quit: WeeChat 1.9.1]
20:23 -!- laggy_wifi is now known as gy_wifi
20:23 < graff> can't I just pretend like the radix is not there? or no?
20:23 -!- hppavilion[1] [~dosgmowdo@58-0-174-206.gci.net] has quit [Ping timeout: 256 seconds]
20:23 -!- m1n [~m1n@unaffiliated/m1ntfr3sh] has joined ##programming
20:23 < graff> ah i see, this is where the mess comes in i guess
20:23 -!- longshi [~mist_@apn-37-248-164-242.dynamic.gprs.plus.pl] has joined ##programming
20:24 -!- longshi [~mist_@apn-37-248-164-242.dynamic.gprs.plus.pl] has quit [Client Quit]
20:24 -!- treeford [~teafordc@d60-65-16-142.col.wideopenwest.com] has quit [Ping timeout: 256 seconds]
20:24 < graff> hmm. ok let me add this conversation to my notes. this is getting complicated
20:25 < PlanckWalk> Usually when converting fractional parts, you would want the number of digits to be the minimum needed to reconstruct all the digits in the original base



00:22 < graff> alphamule: hey. so i was going over the notes from you talking to me about bsae conversion
00:22 -!- pedh [~pedh@106.39.67.33] has quit [Ping timeout: 248 seconds]
00:23 < graff> when it says logN where N is base, how do I get that value? math,h does not have log for any base. only base10 and base2
00:23 < graff> can i compute that logically somehow?
00:23 -!- Big_G [~Big_G@174-24-254-29.tukw.qwest.net] has quit [Read error: Connection reset by peer]
00:23 < alphamule> You can use this definition:
00:23 < graff> like log10(1000) rounded up is basically 4 or some such
00:24 < alphamule> log_n(x) = log(x)/log(n)
00:24 -!- ferdna [~ferdna@cpe-69-23-129-162.elp.res.rr.com] has quit [Quit: Leaving]
00:24 < alphamule> log(n) is a constant
00:24 < graff> alright, let me try that. hmm
00:24 < alphamule> Works for n>0, obviously
00:24 < graff> what constant?
00:24 -!- unixpickle [~alex@2601:645:8103:60b6:994d:5c22:698e:301c] has quit [Quit: My MacBook has gone to sleep. ZZZzzz...]
00:24 < alphamule> Also, log(n) not = 0
00:24 -!- Vornicus [~Vorn@cpe-104-32-37-233.socal.res.rr.com] has quit [Ping timeout: 264 seconds]
00:24 < alphamule> But that shouldn't ever happen XD
00:25 < alphamule> 1/log(n)
00:25 < LuMint> hello
00:25 < graff> oh so, N is the base?
00:25 < alphamule> 1/log10(n) also works, but you must be using log10(x)
00:25 < alphamule> (Has to be same base)
00:26 < alphamule> log10(5)/log10(7) = log(5)/log(7)
00:26 < alphamule> They have the same ratio
00:26 -!- Maxdaman1us is now known as Maxdamantus
00:26 -!- oleo [~oleo@unaffiliated/oleo] has quit [Quit: Leaving]
00:26 < alphamule> Try it with different values :)
00:26 < graff> damn, this is complex. i was thinking of devising a way to compute if there are left over carries from the base 
               conversion, and just extend te cacluation if there are
00:26 -!- ferdna [~ferdna@cpe-69-23-129-162.elp.res.rr.com] has joined ##math
00:26 < alphamule> Yes, log_base
