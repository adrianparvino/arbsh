16:04 < graff> alphamule: well. I guess i need to just let it plow along and make the new number longer. i am a little 
               scared about this
16:04 -!- ap4lmtree [ap4lmtree@unaffiliated/ap4lmtree] has joined ##math
16:04 -!- kreest| [~kreest@176.241.14.82.pool.invitel.hu] has joined ##math
16:04 < alphamule> You can also use an array prefilled to some size you estimate based on the difference
16:04 < alphamule> Like, say, binary to hex
16:05 -!- ^mtkd [~mtkd@88.96.93.54] has quit [Read error: Connection reset by peer]
16:05 < alphamule> You _know_ hex values take 1/4th the space
16:05 < graff> well, it's going the other way that is the problem. 
16:05 < alphamule> So, say, a 21-digit hex value can never be more than 84 bits
16:05 -!- mtkd [~mtkd@88.96.93.54] has joined ##math
16:05 < graff> ah right. so how can i predict how much space the other direction will take, sorta?
16:05 -!- zopsi [~zopsi@dir.ac] has joined ##math
16:05 < alphamule> Or a 128-bit number is never more than 32 nibbles
16:05 < quintopia> logs
16:05 -!- Destol [~Destol@public-248-94.nat.utoronto.ca] has joined ##math
16:05 < alphamule> Yes, it's a logorithmic rule
16:06 < graff> say hex to binary, which makes a longer number
16:06 < alphamule> Say, base 10 to 8
16:06 < ap4lmtree> hi, i am trying to figure out my moeny i owe to a newegg credit card, if i pay it off in 6 months, then 
                   i get no interest charges, but if i dont then i have to pay about 30% interest for that 6 months. For 
                   400 dollars, that would mean i would have to pay  compound interset, but it would be less than 120?
16:06 < graff> alphamule: ahh nice
16:06 < alphamule> Round up and done :D
16:06 < quintopia> the length of a number n in base b is floor(log_b(n))+1
16:06 -!- SuperJen [~JenElizab@cpc76794-brmb10-2-0-cust542.1-3.cable.virginm.net] has joined ##math
16:06 < alphamule> This is assuming you're using something like BCD or a string to do large numbers.
16:07 < ap4lmtree> https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php
16:07 < graff> alright so i don't have log obviously. i mean i can write it, but i need something a bit different
16:07 < quintopia> i'm not assuming anything :P
16:07 < ap4lmtree> that says it would be about 60 dollars,  sound that sound about right?
16:07 < ap4lmtree> or am i thinking about this wrong
16:07 < mud> ap4lmtree: Is it 30% annual interest, compounded monthly?
16:07 < ap4lmtree> yes
16:07 -!- ztychr [~johs@unaffiliated/ztychr] has joined ##math
16:07 < PlanckWalk> ap4lmtree: Yes, that looks about right
16:07 < mud> That could be around 60 bucks, seems right.
16:07 < ap4lmtree> okay thank you very much
16:08 < graff> alphamule: i think i know how to get that logically though, thank you 
16:08 < graff> let me mess around with it a bit and I will come back
16:08 < alphamule> For stuff like 10 to binary...
16:08 -!- Millennial [~quassel@212.252.143.66] has quit [Ping timeout: 248 seconds]
16:08 < alphamule> Well, you do the log _once_
16:08 < alphamule> log(10)/log(2)
16:08 < eularx> mancha: yeah, only bit I was confused about was why R(a) = R[x]/<x^2+1>, but think I've got it now!
16:08 < alphamule> Same as log of 10 in base 2
16:08 < alphamule> And just store that as a constant
16:08 < graff> so i do the log on the base?
16:08 < alphamule> Rounding up for safety :)
16:09 -!- damke_ [~damke@unaffiliated/damke] has quit [Ping timeout: 240 seconds]
16:09 < graff> well, anyway. I am confused. but i will copy the cnversation and get it worked out
16:09 < graff> thank you
16:09 < quintopia> alphamule: yes this is the solution i was thinking
16:09 < alphamule> Like log_2 of 10 is 3.3219280948873623478703194294894
16:09 < alphamule> So for 5 decimal digits...
16:10 < quintopia> graff: what system is this that doesn't have logs?
16:10 < alphamule> 16.609640474436811739351597147447
16:10 -!- Guest70716 [~JenElizab@cpc76794-brmb10-2-0-cust542.1-3.cable.virginm.net] has quit [Ping timeout: 260 seconds]
16:10 < alphamule> So this is rounded to 17 bits
16:10 < alphamule> Not counting sign
16:11 < quintopia> i mean, this method doesn't require you to take logs of your bignums, just the base.
16:11 < alphamule> Assuming unsigned integer in string form (that is, ASCII for '0' and '1')
16:11 < graff> quintopia: well i wrote the system, i can use log for single digits though
16:11 < alphamule> Yeah, that's the clever bit
16:11 -!- kazlock [~kazlock@c-73-41-121-246.hsd1.ca.comcast.net] has quit [Ping timeout: 255 seconds]
16:11 < graff> i thought you meant running log on my bignum / array, which is not really possible
16:11 < alphamule> Number of digits times the ratio of the logs
16:11 -!- Millennial [~quassel@212.252.143.66] has joined ##math
16:12 < alphamule> digits*log_b1(b2) I believe
16:12 < alphamule> Where b1 and b2 are the bases
16:12 < quintopia> alphamule: i'm not sure why anyone would store the numbers as strings of ascii digits. i'm not sure why 
                   anyone would even allow the internal representation to change bases.
16:12 < graff> alphamule: well you have me on the right track anyway. i might be able to find more reference in Knuth's 
               TAOCP
16:12 < alphamule> It's just as example, quintopia
16:12 < alphamule> Packed bits is another
16:13 < alphamule> Or BCD or whatever
16:13 < graff> quintopia: strings or int arrays can actually be very effective
16:13 < quintopia> packed bits is the way to go
16:13 < quintopia> or int arrays yeah
16:13 < alphamule> It depends on application :)

