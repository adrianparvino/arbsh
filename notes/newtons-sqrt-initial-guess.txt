17:34 < dalias> graff, for sqrt you can assume the argument is in the interval [1,4)
17:35 < dalias> otherwise just factor out a power of 4 and replace it with a power of 2



20:28 < PlanckWalk> graff: It means you can write  x = y 4^n  where y in [1...4), so that  sqrt(x) = sqrt(y) 2^n
20:28 < PlanckWalk> Multiplication by 2^n is just a bitshift if you're using a binary representation.
20:29 < PlanckWalk> Err, y in [1,4)

22:19 < PlanckWalk> The n is the unique integer that satisfies that condition.

22:19 < PlanckWalk> You can count bits to find it :)

22:21 < PlanckWalk> E.g. for  x = 1215.3, you get  x = 1.18681640625 * 4^5

22:21 < PlanckWalk> So  y = 1.18681640625, n = 5

22:26 < PlanckWalk> If you were just getting a starting point for iterative root finder, you probably only need one significant figure 
                    for y




22:27 < PlanckWalk> (Or even zero of them)

